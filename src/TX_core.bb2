; =============================================================================
; TX_core
; -----------------------------------------------------------------------------
; Text display functions
; Prefix TX = Text facilities

DEFTYPE .w TX_frame_x, TX_frame_y

Statement TX_initialize{fontfile$, framefile$}
  !DB_trace{"TX_CORE", "TX_initialize: " + fontfile$ + ", " + framefile$}
  LoadShapes #TX_font_start, #TX_font_end, "data/" + fontfile$
  LoadShapes #TX_frame_start, #TX_frame_end, "data/" + framefile$
End Statement

Statement TX_uninitialize{}
  !DB_trace{"TX_CORE", "TX_uninitialize"}
  For s = #TX_font_start To #TX_font_end
    Free Shape s
  Next

  For s = #TX_frame_start To #TX_frame_end
    Free Shape s
  Next
End Statement

BLITZ

Statement TX_draw_single_line{text$}
    !DB_trace{"TX_CORE", "TX_draw_single_line: " + text$}
    SHARED *NN_string_table, TX_frame_x, TX_frame_y
    DEFTYPE .l strloc, strlen
    DEFTYPE .w x, y, width

    strlen = Len(text$)

    width = strlen * #TX_font_width

    ; Center the text in the frame
    x = TX_frame_x - (width LSR 1)
    y = TX_frame_y - (#TX_font_height LSR 1)

    ;BBlit 0, #TX_frame_id, TX_frame_x, TX_frame_y, %0

    For i = 1 To strlen
        BBlit 0, Asc(Mid$(text$, i, 1)), x, y, %0
        x + #TX_font_width
    Next

    tick.w = 0

    ; Blink the caret
    Repeat
        If tick MOD 2 = 0
            BBlit 1, 127, x + #TX_font_width, y, %0
        Else
            UnBuffer 1
        End If

        tick + 1
        VWait 10
    Until Joyb(0) = 1

    ; Remove the text
    UnBuffer 0
End Statement

Statement TX_draw_text{text$, bmp_id, x.w, y.w}
  DEFTYPE .w width, strlen

  strlen = Len(text$)
  width = strlen * #TX_font_width

  If x + width > #NN_screen_width Then x = #NN_screen_width - width
  If y + #TX_font_height > DispHeight Then y = DispHeight - #TX_font_height

  Use BitMap bmp_id
  For i = 0 To strlen - 1
    Blit Peek.b (&text$ + i), x, y, %0
    x + #TX_font_width
  Next
End Statement

Statement TX_draw_text_centered{text$, cx.w, cy.w}
  DEFTYPE .w width, halfw, halfh, strlen, x

  strlen = Len(text$)
  width = strlen * #TX_font_width
  halfw = width LSR 1
  halfh = #TX_font_height LSR 1

  If cx - halfw < 0 Then cx = halfw
  If cx + halfw >= #NN_screen_width Then cx = #NN_screen_width - halfw
  If cy - halfh < 0 Then cy = halfh
  If cy + halfh >= #NN_screen_width Then cy = #NN_screen_width - halfh

  x = cx - halfw
  For i = 0 To strlen - 1
    BBlit 0, Peek.b (&text$ + i), x, cy, %0
    x + #TX_font_width
  Next
End Statement

#TX_max_words = 128 ; Assume no more than 128 words in one go
Dim tx_word_begin.w(#TX_max_words)
Dim tx_word_end.w(#TX_max_words)
DEFTYPE .w tx_word_count

BLITZ

; [INTERNAL]
; Breaks a string into words, placing the beginning and ending of each word
; in the tx_word_begin and tx_word_end global arrays.
; =============================================================================
Statement tx_get_words{text$}
  !DB_trace{"TX_CORE", "tx_get_words"}
  SHARED tx_word_begin(), tx_word_end(), tx_word_count
  DEFTYPE .w begin, current, text_len

  ; Find the beginning and ends of every word
  tx_word_count = 0
  text_len = Len(text$)
  For begin = 1 To text_len
    current = begin
    While current < text_len AND Peek.b (&text$ + current) <> #TX_space
      current + 1 ; skip the space
    Wend

    tx_word_begin(tx_word_count) = begin - 1
    tx_word_end(tx_word_count) = current - 1
    tx_word_count + 1
    begin = current + 1; skip the space
  Next
End Statement

; [INTERNAL]
; Used to draw a frame around the text
; =============================================================================
Statement tx_draw_frame{line_max.w, line_count.w}
  !DB_trace{"TX_CORE", "tx_draw_frame: " + Str$(line_max) + ", " + Str$(line_count)}
  ; Top
  Blit #TX_frame_tl, 0, 0, 0
  DEFTYPE .w x
  x = #TX_frame_size
  For i = 1 To line_max
    Blit #TX_frame_tm, x, 0, 0
    x + #TX_font_width
  Next
  Blit #TX_frame_tr, x, 0, 0

  ; Middle
  For i = 1 To line_count
    Blit #TX_frame_ml, 0, #TX_font_height * i, 0
    Blit #TX_frame_mr, x, i * #TX_font_height, 0
  Next i

  ; Bottom
  Blit #TX_frame_bl, 0, #TX_font_height * (line_count + 1), 0
  x = #TX_frame_size
  For i = 1 To line_max
    Blit #TX_frame_bm, x, #TX_font_height * (line_count + 1), 0
    x + #TX_font_width
  Next
  Blit #TX_frame_br, x, #TX_font_height * (line_count + 1), 0
End Statement

; Draws a multiline string wrapped a given width. The text is drawn around a
; center point.
; =============================================================================
Statement TX_draw_text_wrapped{text$, line_max.w, cx.w, cy.w, should_wait.b}
  !DB_trace{"TX_CORE", "TX_draw_text_wrapped: " + text$ + " " + Str$(line_max) + ", " + Str$(x) + "," + Str$(y)}
  SHARED tx_word_begin(), tx_word_end(), tx_word_count, NN_current_bmp, NN_pointer_id
  DEFTYPE .w widthw, line_count
  DEFTYPE .w remaining
  DEFTYPE .w x0, y0, x, y, widthr, heightr, max_len, cur_len

  BitMap #TX_scratch_bmp, #NN_screen_width, #NN_screen_height, #NN_screen_bpp
  Use BitMap #TX_scratch_bmp

  ; Find the beginning and ends of every word
  tx_get_words{text$}

  ; Figure out how many lines it's going to be amd what's the size of the longest line
  remaining = line_max
  line_count = 1
  For i = 0 To tx_word_count - 1
    widthw = tx_word_end(i) - tx_word_begin(i) + 1

    If remaining - widthw < 0
      ; Advance To Next Line
      line_count + 1
      remaining = line_max
      cur_len = 0
    End If

    remaining - (widthw + 1) ; account for the space
    cur_len + widthw + 1
    If cur_len > max_len Then max_len = cur_len
  Next i

  If max_len < line_max Then line_max = max_len

  ; Calculate how big a rectangle this will be, including enough
  ; padding for the text frame
  widthr = line_max * #TX_font_width + #TX_frame_total_size
  heightr = line_count * #TX_font_height + #TX_frame_total_size
  x0 = #TX_frame_size
  y0 = #TX_frame_size

  ; Draw the frame
  ; Text area
  Boxf x0, y0, x0 + widthr - #TX_frame_total_size, y0 + heightr - #TX_frame_total_size, 3
  tx_draw_frame{line_max, line_count}

  ; Finally draw the text
  remaining = line_max
  x = x0
  y = y0
  For i = 0 To tx_word_count - 1
    widthw = tx_word_end(i) - tx_word_begin(i) + 1

    If remaining - widthw < 0
      ; Advance to next line
      x = x0
      y + #TX_font_height
      remaining = line_max
    End If

    ; Print the word
    For j = tx_word_begin(i) To tx_word_end(i)
      Blit Peek.b(&text$ + j), x, y, %0
      x + #TX_font_width
    Next j

    remaining - (widthw + 1) ; account for the space
    x + #TX_font_width
  Next i

  GetaShape #TX_text_shape, 0, 0, widthr, heightr
  MidHandle #TX_text_shape
  Use BitMap NN_current_bmp

  DEFTYPE .w halfw, halfh
  halfw = widthr LSR 1
  halfh = heightr LSR 1

  If cx - halfw < 0 Then cx = halfw
  If cx + halfw >= #NN_screen_width Then cx = #NN_screen_width - halfw
  If cy - halfh < 0 Then cy = halfh
  If cy + halfh >= #NN_screen_height Then cy = #NN_screen_height - halfh

  BBlit 0, #TX_text_shape, cx, cy, %0

  Free Shape #TX_text_shape
  Free BitMap #TX_scratch_bmp

  If should_wait = True
    DEFTYPE .b left_mouse
    Repeat
      VWait
      left_mouse = IN_update_mouse{}
      DisplaySprite #CP_coplist, NN_pointer_id, MouseX, MouseY, 0
    Until left_mouse = #IN_mouse_released
    UnBuffer 0
  End If
End Statement


Function .w tx_calculate_offset{line_max.w, char_count.w, justify.b}
  Select justify
    Case #TX_justify_left
      Function Return 0
    Case #TX_justify_center
      Function Return (line_max - char_count) LSR 1
    Case #TX_justify_right
      Function Return line_max - char_count
  End Select

  Function Return 0
End Function

Macro __blit_text
  For bt_id.w = `2 To `3
    bt_char.w = Peek.b(`1 + bt_id)
    If bt_char < 0
      bt_char + 256
    End If

    Blit bt_char, `4, `5, %0
    `4 + #TX_font_width
  Next bt_id
End Macro

Function .l TX_render_wrapped{id.w, line_max.w, x0.w, y0.w, justify.b}
  !DB_trace{"TX_CORE", "TX_render_wrapped: " + Str$(id) + " " + Str$(line_max) + ", " + Str$(x0) + "," + Str$(y0)}
  !__use_string_table{}
  !__use_word_table{}

  DEFTYPE .w word_count
  word_count = !__get_word_count{id}

  DEFTYPE .NN_word *word
  *word = !__get_words{id}

  DEFTYPE .w remaining, word_width, x, y, max_width, line_width, line_count
  DEFTYPE .w l_start_idx, l_end_idx, w_start_idx, w_end_idx
  DEFTYPE .w offset
  DEFTYPE .b is_newline
  remaining = line_max
  x = x0
  y = y0

  DEFTYPE .b *text
  *text = !__get_string_addr{id}

  l_start_idx = -1
  l_end_idx = 0
  max_width = 0
  line_count = 0
  offset = 0
  For w = 1 To word_count
    w_start_idx = *word\start_idx
    w_end_idx = *word\end_idx
    is_newline = (w_end_idx = -1)
    is_last_word = (w = word_count)
    word_width = (w_end_idx - w_start_idx + 1)

    If is_newline OR (remaining - word_width) < 0
      If l_start_idx >= 0
        offset = tx_calculate_offset{line_max, (l_end_idx - l_start_idx + 1), justify }
        line_width = (l_end_idx - l_start_idx + 1) + offset
        x + (offset * #TX_font_width)
        !__blit_text{*text, l_start_idx, l_end_idx, x, y, line_max, justify}

        line_count + 1
        If max_width < line_width Then max_width = line_width
      End If

      l_start_idx = -1

      x = x0
      y + #TX_font_height
      remaining = line_max
    End If

    If NOT is_newline
      If l_start_idx < 0
        l_start_idx = w_start_idx
      End If

      l_end_idx = w_end_idx
      remaining - (word_width + 1) ; account for the space
    End If

    *word + SizeOf .NN_word
  Next

  If l_start_idx >= 0
    offset = tx_calculate_offset{line_max, (l_end_idx - l_start_idx + 1), justify }
    line_width = (l_end_idx - l_start_idx + 1) + offset
    x + (offset * #TX_font_width)
    !__blit_text{*text, l_start_idx, l_end_idx, x, y, line_max, justify}

    line_count + 1
    If max_width < line_width Then max_width = line_width
  End If
  Function Return !__make_size{max_width, line_count}
End Function

NEWTYPE .TX_context
  max_width.w
  y_position.w
  add_frame.b
  justify.b
  center_vertical.b
  padding.b
End NEWTYPE

Statement TX_begin{context.l, add_frame.b, center_vertical.b}
  BitMap #TX_scratch_bmp, #NN_screen_width, #NN_screen_height, #NN_screen_bpp
  Use BitMap #TX_scratch_bmp

    ; Draw the frame
  If add_frame = True Then Boxf 0, 0, #NN_screen_width, #NN_screen_height, 3

  DEFTYPE .TX_context *ctx
  *ctx = context
  *ctx\max_width = 0
  *ctx\y_position = 0
  *ctx\add_frame = add_frame
  *ctx\justify = #TX_justify_left
  *ctx\center_vertical = center_vertical
End Statement

Statement TX_end{context.l, x.w, y.w, should_wait.b}
  SHARED NN_current_bmp
  DEFTYPE .TX_context *ctx
  *ctx = context

  ; Draw the frame
  If *ctx\add_frame = True Then tx_draw_frame{*ctx\max_width, *ctx\y_position}

  ; Calculate how big a rectangle this will be, including enough
  ; padding for the text frame
  DEFTYPE .w rect_width, rect_height
  rect_width = *ctx\max_width * #TX_font_width
  rect_height = *ctx\y_position * #TX_font_height

  If *ctx\add_frame = True
    rect_width + #TX_frame_total_size
    rect_height + #TX_frame_total_size
  End If

  GetaShape #TX_text_shape, 0, 0, rect_width, rect_height
  Use BitMap NN_current_bmp

  If x < 0 Then x = 0
  If x + rect_width >= #NN_screen_width Then x = #NN_screen_width - rect_width
  If y < 0 Then y = 0
  If y + rect_height >= #NN_screen_height Then y = #NN_screen_height - rect_height
  If *ctx\center_vertical Then y = (#NN_screen_height - ShapeHeight(#TX_text_shape)) LSR 1

  BBlit #BF_main_screen, #TX_text_shape, x, y, %0

  Free Shape #TX_text_shape
  Free BitMap #TX_scratch_bmp

  If should_wait = True
    DEFTYPE .b left_mouse
    Repeat
      VWait
      left_mouse = IN_update_mouse{}
      DisplaySprite #CP_coplist, NN_pointer_id, MouseX, MouseY, 0
    Until left_mouse = #IN_mouse_released
    UnBuffer 0
  End If
End Statement

Function .l TX_put_text{context.l, id.w, line_max.w}
  DEFTYPE .TX_context *ctx
  *ctx = context

  DEFTYPE .w x, y
  x = 0
  y = *ctx\y_position * #TX_font_height
  If *ctx\add_frame
    x + #TX_frame_size
    y + #TX_frame_size
  End If

  DEFTYPE .l size
  size = TX_render_wrapped{id, line_max, x, y, *ctx\justify}

  DEFTYPE .w width, height
  width = !__get_size_width{size}
  height = !__get_size_height{size}

  If *ctx\max_width < width Then *ctx\max_width = width
  *ctx\y_position + height
  Function Return size
End Function

Statement TX_draw_to_shape{shape_id, text$, scratch_bmp_id}
  DEFTYPE .w width
  width = Len(text$) * #TX_font_width

  BitMap scratch_bmp_id, width, #TX_font_height, 5
  TX_draw_text{text$, scratch_bmp_id, 0, 0}
  GetaShape shape_id, 0, 0, width, #TX_font_height
  Free BitMap scratch_bmp_id

End Statement