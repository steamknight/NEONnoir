; =============================================================================
; NN_game
; -----------------------------------------------------------------------------
; Contains functions an statement around running the game
; =============================================================================

CNIF #DEBUG = -1
Statement DEBUG_print_words{}
  !__use_string_table{}
  !__use_word_table{}
  SHARED NN_string_count

  For i = 0 To NN_string_count - 1
    Print !__get_string{i}
    Print ":"

    word_count = !__get_word_count{i}
    !DB_printf{"Iteration %d. %d words", i, word_count}
    DEFTYPE .NN_word *word
    *word = !__get_words{i}
    For j = 0 to word_count - 1

      !DB_printf{"    *word address: %ld, expected %ld", *word, Peek.l(*NN_word_table + (i * SizeOf .l)) + 4}
      !DB_printf{"    start %d, end %d", *word\start_idx, *word\end_idx}
      Print Right$(Hex$(*word\start_idx), 4), "-", Right$(Hex$(*word\end_idx), 4)," "
      *word + SizeOf .NN_word
    Next j

    NPrint ""
  Next i

End Statement
CEND

; Loads a lang pack which contains all the strings for one language
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Function .b NN_load_langpack{filename$}
  !__use_string_table_all{}
  !__use_word_table_all{}

  If Exists(filename$) = 0 Then Function Return #NN_NEON_lang_not_found

  DEFTYPE .w id
  id = 0
  If ReadFile(id, filename$) = 0 Then Function Return #NN_NEON_generic_read_error

  FileInput id

  ; Read the header
  DEFTYPE .l magic
  ReadMem id, &magic, 4
  If magic <> #NN_NEON_lang_magic Then Function Return #NN_NEON_not_a_neon_file

  DEFTYPE .w version, lang_id
  ReadMem id, &version, 2
  ReadMem id, &lang_id, 2

    ; Read all the strings and generate a string table
  ReadMem id, &header, 4
  ReadMem id, &NN_string_count, 4
  ReadMem id, &NN_string_data_size, 4
  *NN_string_table = AllocMem_(NN_string_count * SizeOf .l, $10000)
  *NN_string_data = AllocMem_(NN_string_data_size, $10000)
  !DB_log_str{"NN_GAME", "  Str Table > $" + Hex$(*NN_string_table) + "+" + Str$(NN_string_count * SizeOf .l)}
  !DB_log_str{"NN_GAME", "  Str Data  > $" + Hex$(*NN_string_data) + "+" + Str$(NN_string_data_size)}

  DEFTYPE .l ptr
  ptr = *NN_string_data
  DEFTYPE .l string_size
  For i = 0 To NN_string_count - 1
    Poke.l *NN_string_table + (i * 4), ptr

    ReadMem id, &string_size, 4
    Poke.l ptr, string_size

    ptr + 4
    ReadMem id, ptr, string_size

    ptr + string_size
  Next

  ; Read all the word separations and generate a words list table
  ReadMem id, &header, 4
  ReadMem id, &NN_word_table_count, 4
  ReadMem id, &NN_word_data_size, 4
  *NN_word_table = AllocMem_(NN_word_table_count * SizeOf .l, $10000)
  *NN_word_data = AllocMem_(NN_word_data_size, $10000)
  !DB_log_str{"NN_GAME", "  Wrd Table > $" + Hex$(*NN_word_table) + "+" + Str$(NN_word_table_count * SizeOf .l)}
  !DB_log_str{"NN_GAME", "  Word Data  > $" + Hex$(*NN_word_data) + "+" + Str$(NN_word_data_size)}

  ptr = *NN_word_data
  DEFTYPE .l word_list_size
  For i = 0 To NN_word_table_count - 1
    Poke.l *NN_word_table + (i * 4), ptr

    ReadMem id, &word_list_size, 4
    Poke.l ptr, word_list_size

    ptr + 4
    ReadMem id, ptr, word_list_size * SizeOf .NN_word

    ptr + word_list_size * SizeOf .NN_word
  Next

  Function Return #NN_NEON_success
End Function

; Loads a neon pack
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Function .b NN_load_neonpack{filename$}
  SHARED *NN_locations, *NN_scenes, *NN_regions
  SHARED NN_location_count, NN_scene_count, NN_region_count
  SHARED *NS_script_data, NS_script_data_size
  SHARED *NN_ui_palette
  !__use_string_table_all{}
  !__use_word_table_all{}
  !__use_dialogues{}
  !__use_dialogue_limits{}
  !__use_shapes{}
  !__use_palettes{}


  !DB_trace{"NN_GAME", "NN_load_neonpack: " +  filename$}

  If Exists(filename$) = 0 Then Function Return #NN_NEON_file_not_found

  DEFTYPE .w id
  id = 0
  If ReadFile(id, filename$) = 0 Then Function Return #NN_NEON_generic_read_error

  FileInput id

  ; Read the header
  DEFTYPE .l magic
  ReadMem id, &magic, 4
  If magic <> #NN_NEON_magic Then Function Return #NN_NEON_not_a_neon_file

  ; Read the version -- Support only v1.0
  DEFTYPE .l version
  ReadMem id, &version, 4
  If version <> $00010000 Then Function Return #NN_NEON_version_not_supported

  ; Read in all the locations
  DEFTYPE .l size, header
  ReadMem id, &header, 4
  ReadMem id, &NN_location_count, 4
  size = NN_location_count * SizeOf .NN_location
  *NN_locations = AllocMem_(size, $10000)  ; Best available memory and clear
  ReadMem id, *NN_locations, size
  !DB_log_str{"NN_GAME", "  Locations > $" + Hex$(*NN_locations) + "+" + Str$(size)}

  ; Read in all the scenes
  ReadMem id, &header, 4
  ReadMem id, &NN_scene_count, 4
  size = NN_scene_count * SizeOf .NN_scene
  *NN_scenes = AllocMem_(size, $10000)  ; Best available memory and clear
  ReadMem id, *NN_scenes, size
  !DB_log_str{"NN_GAME", "  Scenes    > $" + Hex$(*NN_scenes) + "+" + Str$(size)}

  ; Read in all the regions
  ReadMem id, &header, 4
  ReadMem id, &NN_region_count, 4
  size = NN_region_count * SizeOf .NN_region
  *NN_regions = AllocMem_(size, $10000)  ; Best available memory and clear
  ReadMem id, *NN_regions, size
  !DB_log_str{"NN_GAME", "  Regions   > $" + Hex$(*NN_regions) + "+" + Str$(size)}

  ; Read all dialogues
  ReadMem id, &header, 4
  ReadMem id, &DG_dialogue_count, 4
  size = DG_dialogue_count * SizeOf .DG_dialogue
  *DG_dialogues = AllocMem_(size, $10000)
  ReadMem id, *DG_dialogues, size
  !DB_log_str{"NN_GAME", "  Dialogues > $" + Hex$(*DG_dialogues) + "+" + Str$(size)}

  ; Read all pages
  ReadMem id, &header, 4
  ReadMem id, &DG_page_count, 4
  size = DG_page_count * SizeOf .DG_page
  *DG_pages = AllocMem_(size, $10000)
  ReadMem id, *DG_pages, size
  !DB_log_str{"NN_GAME", "  Pages     > $" + Hex$(*DG_pages) + "+" + Str$(size)}

  ; Read all choices
  ReadMem id, &header, 4
  ReadMem id, &DG_choice_count, 4
  size = DG_choice_count * SizeOf .DG_choice
  *DG_choices = AllocMem_(size, $10000)
  ReadMem id, *DG_choices, size
  !DB_log_str{"NN_GAME", "  Choices   > $" + Hex$(*DG_choices) + "+" + Str$(size)}

  ; Read all the bytecode... I suppose it's more like word-code
  ReadMem id, &header, 4
  ReadMem id, &NS_script_data_size, 4
  NS_script_data_size * SizeOf .w
  *NS_script_data = AllocMem_(NS_script_data_size, $10000)
  ReadMem id, *NS_script_data, NS_script_data_size
  !DB_log_str{"NN_GAME", "  Script    > $" + Hex$(*NS_script_data) + "+" + Str$(NS_script_data_size)}

  ; Read all the shapes
  ReadMem id, &header, 4
  ReadMem id, &NN_shape_count, 4
  size = NN_shape_count * SizeOf .NN_shape
  *NN_shapes = AllocMem_(size, $10000)
  ReadMem id, *NN_shapes, size
  !DB_log_str{"NN_GAME", "  Shapes    > $" + Hex$(*NN_shapes) + "+" + Str$(size)}

  ; Read all the palettes
  ReadMem id, &header, 4
  ReadMem id, &NN_palette_count, 4
  size = NN_palette_count * SizeOf .NN_pal_entry * 32 ; There are 32 palette entries
  *NN_palettes = AllocMem_(size, $10000)
  ReadMem id, *NN_palettes, size
  !DB_log_str{"NN_GAME", "  Palettes  > $" + Hex$(*NN_palettes) + "+" + Str$(size)}

  ; Read the UI palette
  ReadMem id, &header, 4
  ReadMem id, &header, 4
  size = 32 * SizeOf .NN_pal_entry
  *NN_ui_palette = AllocMem_(size, $10000)
  ReadMem id, *NN_ui_palette, size
  !DB_log_str{"NN_GAME", "  UI Pal    > $" + Hex$(*NN_ui_palette) + "+" + Str$(size)}

  Function Return #NN_NEON_success
End Function

; Frees up all allocated memory
; =============================================================================
Statement NN_uninitialize{}
  !DB_trace{"NN_GAME", "NN_uninitialize"}
  SHARED *NN_locations, *NN_scenes, *NN_regions, *NN_string_table, *NN_string_data
  SHARED NN_location_count, NN_scene_count, NN_region_count, NN_string_count, NN_string_data_size
  SHARED *NS_script_data, NS_script_data_size
  SHARED *NN_word_table, *NN_word_data, NN_word_table_count, NN_word_data_size
  SHARED *NN_ui_palette
  !__use_dialogues{}
  !__use_dialogue_limits{}
  !__use_shapes{}
  !__use_palettes{}

  DEFTYPE .l size

  size = SizeOf .NN_location * NN_location_count
  FreeMem_ *NN_locations, size
  !DB_log_str{"NN_GAME", "  Free locations $" + Hex$(*NN_locations) + ", " + Str$(size)}

  size = SizeOf .NN_scene * NN_scene_count
  FreeMem_ *NN_scenes, size
  !DB_log_str{"NN_GAME", "  Free scenes    $" + Hex$(*NN_scenes) + ", " + Str$(size)}

  size = SizeOf .NN_region * NN_region_count
  FreeMem_ *NN_regions, size
  !DB_log_str{"NN_GAME", "  Free regions   $" + Hex$(*NN_regions) + ", " + Str$(size)}

  size = SizeOf .DG_dialogue * DG_dialogue_count
  FreeMem_ *DG_dialogues, size
  !DB_log_str{"NN_GAME", "  Free dialogues $" + Hex$(*DG_dialogues) + ", " + Str$(size)}

  size = SizeOf .DG_page * DG_page_count
  FreeMem_ *DG_pages, size
  !DB_log_str{"NN_GAME", "  Free pages     $" + Hex$(*DG_pages) + ", " + Str$(size)}

  size = SizeOf .DG_choice * DG_choice_count
  FreeMem_ *DG_choices, size
  !DB_log_str{"NN_GAME", "  Free choices   $" + Hex$(*DG_choices) + ", " + Str$(size)}

  size = NS_script_data_size
  FreeMem_ *NS_script_data, size
  !DB_log_str{"NN_GAME", "  Free str data  $" + Hex$(*NS_script_data) + ", " + Str$(size)}

  size = SizeOf .l * NN_string_count
  FreeMem_ *NN_string_table, size
  !DB_log_str{"NN_GAME", "  Free str table $" + Hex$(*NN_string_table) + ", " + Str$(size)}

  size = NN_string_data_size
  FreeMem_ *NN_string_data, size
  !DB_log_str{"NN_GAME", "  Free str data  $" + Hex$(*NN_string_data) + ", " + Str$(size)}

  size = SizeOf .l * NN_word_table_count
  FreeMem_ *NN_word_table, size
  !DB_log_str{"NN_GAME", "  Free wrd table $" + Hex$(*NN_word_table) + ", " + Str$(size)}

  size = NN_word_data_size
  FreeMem_ *NN_word_data, size
  !DB_log_str{"NN_GAME", "  Free wrd data  $" + Hex$(*NN_word_data) + ", " + Str$(size)}

  size = SizeOf .NN_shape * NN_shape_count
  FreeMem_ *NN_shapes, size
  !DB_log_str{"NN_GAME", "  Free shapes    $" + Hex$(*NN_shapes) + ", " + Str$(size)}

  size = SizeOf .NN_pal_entry * 32 * NN_palette_count
  FreeMem_ *NN_palettes, size
  !DB_log_str{"NN_GAME", "  Free palettes  $" + Hex$(*NN_palettes) + ", " + Str$(size)}

  size = SizeOf .NN_pal_entry * 32
  FreeMem_ *NN_ui_palette, size
  !DB_log_str{"NN_GAME", "  Free ui pal    $" + Hex$(*NN_ui_palette) + ", " + Str$(size)}
End Statement

; Loads the mouse pointers
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Statement NN_load_pointers{filename$}
  !DB_trace{"NN_GAME", "NN_load_pointers"}
  LoadShapes #NN_pointer_start, #NN_pointer_end, filename$

  SpriteMode 0
  For i = #NN_pointer_start To #NN_pointer_end
    GetaSprite i - #NN_pointer_start, i
    Free Shape i
  Next
End Statement

; Initializes the game resources
; neonpack$: Game's .NEON file, relative to the data/ directory
; pointers$: Game's mouse cursors, relative to the data/ directory
; =============================================================================
Function NN_initialize{neonpack$, pointers$}
  SHARED NN_error_codes$(), NS_page_flags(), NS_choice_flags()

  !DB_trace{"NN_GAME", "NEONpack: " + neonpack$ + " Mouse Pointers: " + pointers$}
  NN_load_pointers{"data/" + pointers$}

  DEFTYPE .b success
  success = NN_load_neonpack{"data/" + neonpack$}
  If success <> #NN_NEON_success
    !DB_error{"MAIN", "Could not load data/" + neonpack$}
    !DB_error{"MAIN", NN_error_codes$(success)}
    Function Return success
  End If

  success = NN_load_langpack{"data/lang/en.noir"}
  If success <> #NN_NEON_success
    !DB_error{"MAIN", "Could not load data/lang/en.noir"}
    !DB_error{"MAIN", NN_error_codes$(success)}
    Function Return success
  End If

  For f = 0 to #NS_flag_count
    NS_page_flags(f) = True
    NS_choice_flags(f) = True
  Next

  Function Return success
End Function

; Sets the currently selected scene
; =============================================================================
Statement NN_game_set_scene{id.w}
  !DB_trace{"NN_GAME", "NN_game_set_scene: " + Str$(id)}
  SHARED *NN_scenes, *NN_current_scene, NN_current_bmp, *NN_current_location
  SHARED NN_current_palette, NS_script_queue
  SHARED NN_current_scene_id, NN_current_global_scene_id

  NN_current_scene_id = id
  NN_current_global_scene_id = *NN_current_location\first_scene + id

  NN_current_palette = -1

  ; If *NN_current_scene\on_exit <> -1
  ;   NS_execute_script{*NN_current_scene\on_exit}
  ; End If

  ;FadeOutScreen{ #CP_coplist, NN_current_bmp, 10}
  *NN_current_scene = !__get_scene{NN_current_global_scene_id}

  If *NN_current_scene\on_enter > -1
   NS_script_queue = *NN_current_scene\on_enter
  End If

  If *NN_current_scene\music_id > -1
    MS_load_module{*NN_current_scene\music_id, 0}
  End If

  NN_current_bmp = *NN_current_scene\background_id

  ;FadeInScreen{ #CP_coplist, NN_current_bmp, 10}

End Statement

; Loads the bitmaps for the new location and set the current
; scene to the selected one.
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Statement NN_load_location{new_loc_id.w, new_scene_id.w}
  !DB_trace{"NN_GAME", "NN_load_location{" + Str$(new_loc_id) + ", " + Str$(new_scene_id) + "}"}
  SHARED NN_current_location_id, NN_fade_out, NN_current_bmp
  SHARED *NN_current_location, *NN_current_scene
  SHARED *NN_locations, *NN_scenes
  !__use_string_table{}
  !__use_shapes{}

  NN_current_location_id = new_loc_id

  BLITZ
  FadeOutScreen {#CP_coplist, NN_current_bmp, #PAL_fx}

  DisplaySprite #CP_coplist, #NN_pointer_wait - #NN_pointer_start, #NN_screen_width LSR 1, #NN_screen_height LSR 1, 0
  NN_set_ui_colors{#PAL_fx}
  DisplayPalette #CP_coplist, #PAL_fx
  QAMIGA

  *NN_current_location = !__get_location{new_loc_id}

  ; Load the shapes if there are any
  If *NN_current_location\shapes_file <> -1
    DEFTYPE .NN_shape *first_shape, *last_shape
    *first_shape = !__get_shape{*NN_current_location\first_shape}
    *last_shape = !__get_shape{*NN_current_location\last_shape}
    LoadShapes *first_shape\shape_id, *last_shape\shape_id, "data/" + !__get_string{*NN_current_location\shapes_file}
  End If

  ; Load all the backgrounds
  DEFTYPE .w bg_count
  bg_count = *NN_current_location\last_bg - *NN_current_location\first_bg
  For bg = 0 To bg_count
    BitMap bg, #NN_screen_width, #NN_screen_height, #NN_screen_bpp
    bmp$ = !__get_string{bg + *NN_current_location\first_bg}
    ;NPrint bmp$
    LoadBitMap bg, "data/" + bmp$, bg
  Next

  BLITZ
  If new_loc_id > 0
    For bg = 0 To bg_count
      Use BitMap bg
      Blit #NN_menu_shape, 320 - ShapeWidth(#NN_menu_shape) - 4, 200 - ShapeHeight(#NN_menu_shape) - 4, 0
    Next
  End If

  QAMIGA

  ; Setup the next scene
  NN_game_set_scene{new_scene_id}
  ;*NN_current_scene = !__get_scene{*NN_current_location\first_scene + new_scene_id}
  ; If *NN_current_scene\on_enter <> -1
  ;   NS_execute_script{*NN_current_scene\on_enter}
  ; End If

  If new_loc_id > 0 Then NN_is_in_title = False

  PrintFreeMem{}
End Statement

; Checks if a point is inside one of the regions
; =============================================================================
Function.w NN_get_overlapped_region{mx.w, my.w}
  ;!DB_trace{"NN_GAME", "NN_get_overlapped_region"}
  SHARED *NN_regions, *NN_current_scene
  DEFTYPE .NN_region *region

  For r = *NN_current_scene\first_region To *NN_current_scene\last_region
    *region = !__get_region{r}
    x1.w = *region\x1
    x2.w = *region\x2
    y1.w = *region\y1
    y2.w = *region\y2

    If mx >= x1 AND mx < x2 AND my >= y1 AND my < y2
      Function Return r
    End If
  Next

  Function Return -1
End Function

Statement NN_game_map{}
  !DB_trace{"NN_GAME", "NN_game_map"}
  NPrint "Displaying location map"
End Statement

Statement NN_game_over{id.w}
  !DB_trace{"NN_GAME", "NN_game_over"}
End Statement

Statement NN_quit_game{}
  SHARED NN_should_quit
  NN_should_quit = True
End Statement

; Saves the game
; =============================================================================
Statement NN_save_game{}
  !DB_trace{"NN_GAME", "NN_save_game"}
  SHARED NN_current_location_id, NN_current_scene_id
  SHARED NS_flags(), NS_page_flags(), NS_choice_flags(), NS_scene_flags()
  !__use_dialogues{}
  !__use_dialogue_limits{}

  DEFTYPE .w id
  id = 0
  If OpenFile(id, "save.neon") = 0
    !DB_trace{"NN_GAME", "Could not save game."}
    Statement Return
  End If

  ; Write the player's current location
  WriteMem id, &NN_current_location_id, SizeOf .w
  WriteMem id, &NN_current_scene_id, SizeOf .w

  ; Write all the flags!
  For i = 0 To #NS_flag_count
    WriteMem id, &NS_flags(i), (SizeOf .b)
  Next

  For i = 0 To #NS_flag_count
    WriteMem id, &NS_page_flags(i), (SizeOf .b)
  Next

  For i = 0 To #NS_flag_count
    WriteMem id, &NS_choice_flags(i), (SizeOf .b)
  Next

  For i = 0 To #NS_flag_count
    WriteMem id, &NS_scene_flags(i), (SizeOf .b)
  Next

  CloseFile id
End Statement

; Loads the game
; =============================================================================
Statement NN_load_game{}
  !DB_trace{"NN_GAME", "NN_load_game"}
  SHARED NN_current_location_id, NN_current_scene_id
  SHARED NS_flags(), NS_page_flags(), NS_choice_flags(), NS_scene_flags()
  !__use_dialogues{}
  !__use_dialogue_limits{}

  DEFTYPE .w id
  id = 0
  If OpenFile(id, "save.neon") = 0 Then Statement Return

  ; Read the player's current location
  ReadMem id, &NN_current_location_id, SizeOf .w
  ReadMem id, &NN_current_scene_id, SizeOf .w

  ; Read all the flags!
  DEFTYPE .b flag
  For i = 0 To #NS_flag_count
    ReadMem id, &flag, (SizeOf .b)
    NS_flags(i) = flag
  Next

  For i = 0 To #NS_flag_count
    ReadMem id, &flag, (SizeOf .b)
    NS_page_flags(i) = flag
  Next

  For i = 0 To #NS_flag_count
    ReadMem id, &flag, (SizeOf .b)
    NS_choice_flags(i) = flag
  Next

  For i = 0 To #NS_flag_count
    ReadMem id, &flag, (SizeOf .b)
    NS_scene_flags(i) = flag
  Next

  CloseFile id

  ; Move to the current location
  NN_load_location{NN_current_location_id, NN_current_scene_id}
End Statement
