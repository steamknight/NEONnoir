; =============================================================================
; NN_game
; -----------------------------------------------------------------------------
; Contains functions an statement around running the game
; =============================================================================

QAMIGA

Macro __SafeAlloc
  If `3 > 0
    `2 = AllocVec_((`3), #MEMF_FAST_CLEAR)
    If `2 = 0 Then
      err$ = "Failed to allocate " + Str$(`3) + " bytes for " + `1
      NPrint err$
      !DB_log_str{"NN_GAME", "ERROR! " + err$}

      Function Return #NN_NEON_out_of_memory
    End If
  End If
End Macro

Macro __SafeFree
  If `2 <> 0
    FreeVec_(`2)
    !DB_log_str{"NN_GAME", "  Free " + `1 + " $" + Hex$(`2)}
  End If
End Macro

Macro __LoadChunk
  ReadMem id, &header, 4
  ReadMem id, &`4, 4
  size = `4 * `2
  !__SafeAlloc{`1, `3, size}
  ReadMem id, `3, size
  !DB_log_str{"NN_GAME", "  " + `1 + " > $" + Hex$(`3) + "+" + Str$(size)}
End Macro

; Loads a lang pack which contains all the strings for one language
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Function .b NN_load_langpack{filename$}
  !DB_trace{"MAIN", "NN_load_langpack: " + filename$}
  !__use_string_table_all{}
  !__use_word_table_all{}

  If Exists(filename$) = 0 Then Function Return #NN_NEON_lang_not_found

  DEFTYPE .w id
  id = 0
  If ReadFile(id, filename$) = 0 Then Function Return #NN_NEON_generic_read_error

  FileInput id

  ; Read the header
  DEFTYPE .l magic
  ReadMem id, &magic, 4
  If magic <> #NN_NEON_lang_magic Then Function Return #NN_NEON_not_a_neon_file

  DEFTYPE .w version, lang_id
  ReadMem id, &version, 2
  ReadMem id, &lang_id, 2

    ; Read all the strings and generate a string table
  ReadMem id, &header, 4
  ReadMem id, &NN_string_count, 4
  ReadMem id, &NN_string_data_size, 4
  !__SafeAlloc{"String Table", *NN_string_table, NN_string_count * SizeOf .l}
  !__SafeAlloc{"String Data", *NN_string_data, NN_string_data_size}
  !DB_log_str{"NN_GAME", "  Str Table > $" + Hex$(*NN_string_table) + "+" + Str$(NN_string_count * SizeOf .l)}
  !DB_log_str{"NN_GAME", "  Str Data  > $" + Hex$(*NN_string_data) + "+" + Str$(NN_string_data_size)}

  DEFTYPE .l ptr
  ptr = *NN_string_data
  DEFTYPE .l string_size
  For i = 0 To NN_string_count - 1
    Poke.l *NN_string_table + (i * 4), ptr

    ReadMem id, &string_size, 4
    Poke.l ptr, string_size

    ptr + 4
    ReadMem id, ptr, string_size

    ptr + string_size
  Next

  ; Read all the word separations and generate a words list table
  ReadMem id, &header, 4
  ReadMem id, &NN_word_table_count, 4
  ReadMem id, &NN_word_data_size, 4
  !__SafeAlloc{"Word Table", *NN_word_table, NN_word_table_count * SizeOf .l}
  !__SafeAlloc{"Word Data", *NN_word_data, NN_word_data_size}
  !DB_log_str{"NN_GAME", "  Wrd Table > $" + Hex$(*NN_word_table) + "+" + Str$(NN_word_table_count * SizeOf .l)}
  !DB_log_str{"NN_GAME", "  Word Data  > $" + Hex$(*NN_word_data) + "+" + Str$(NN_word_data_size)}

  ptr = *NN_word_data
  DEFTYPE .l word_list_size
  For i = 0 To NN_word_table_count - 1
    Poke.l *NN_word_table + (i * 4), ptr

    ReadMem id, &word_list_size, 4
    Poke.l ptr, word_list_size

    ptr + 4
    ReadMem id, ptr, word_list_size * SizeOf .NN_word

    ptr + word_list_size * SizeOf .NN_word
  Next

  Function Return #NN_NEON_success
End Function

; Loads a neon pack
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Function .b NN_load_neonpack{filename$}
  SHARED *NN_locations, *NN_scenes, *NN_regions, *NN_text_regions
  SHARED NN_location_count, NN_scene_count, NN_region_count, NN_text_region_count
  SHARED *NS_script_data, NS_script_data_size
  SHARED *NN_ui_palette
  !__use_string_table_all{}
  !__use_word_table_all{}
  !__use_dialogues{}
  !__use_dialogue_limits{}
  !__use_shapes{}
  !__use_palettes{}


  !DB_trace{"NN_GAME", "NN_load_neonpack: " +  filename$}

  If Exists(filename$) = 0 Then Function Return #NN_NEON_file_not_found

  DEFTYPE .w id
  id = 0
  If ReadFile(id, filename$) = 0 Then Function Return #NN_NEON_generic_read_error

  FileInput id

  ; Read the header
  DEFTYPE .l magic
  ReadMem id, &magic, 4
  If magic <> #NN_NEON_magic Then Function Return #NN_NEON_not_a_neon_file

  ; Read the version -- Support only v1.0
  DEFTYPE .l version
  ReadMem id, &version, 4
  If version <> $00010000 Then Function Return #NN_NEON_version_not_supported

  DEFTYPE .l size, header, ui_palette_count
  !__LoadChunk{"Locations   ", SizeOf .NN_location,     *NN_locations,    NN_location_count   }
  !__LoadChunk{"Scenes      ", SizeOf .NN_scene,        *NN_scenes,       NN_scene_count      }
  !__LoadChunk{"Regions     ", SizeOf .NN_region,       *NN_regions,      NN_region_count     }
  !__LoadChunk{"Text Regions", SizeOf .NN_text_region,  *NN_text_regions, NN_text_region_count}
  !__LoadChunk{"Dialogues   ", SizeOf .DG_dialogue,     *DG_dialogues,    DG_dialogue_count   }
  !__LoadChunk{"Page        ", SizeOf .DG_page,         *DG_pages,        DG_page_count       }
  !__LoadChunk{"Choices     ", SizeOf .DG_choice,       *DG_choices,      DG_choice_count     }
  !__LoadChunk{"Script Data ", SizeOf .w,               *NS_script_data,  NS_script_data_size }
  !__LoadChunk{"Shapes      ", SizeOf .NN_shape,        *NN_shapes,       NN_shape_count      }
  !__LoadChunk{"Palettes    ", SizeOf .NN_pal_entry * 32, *NN_palettes,   NN_palette_count    }
  !__LoadChunk{"UI Palette  ", SizeOf .NN_pal_entry,    *NN_ui_palette,   ui_palette_count    }

  Function Return #NN_NEON_success
End Function

; Frees up all allocated memory
; =============================================================================
Statement NN_uninitialize{}
  !DB_trace{"NN_GAME", "NN_uninitialize"}
  SHARED *NN_locations, *NN_scenes, *NN_regions, *NN_string_table, *NN_string_data
  SHARED *NS_script_data, *NN_word_table, *NN_word_data, *NN_ui_palette
  !__use_dialogues{}
  !__use_dialogue_limits{}
  !__use_shapes{}
  !__use_palettes{}

  DEFTYPE .l size

  !__SafeFree{"Locations    ", *NN_locations    }
  !__SafeFree{"Scenes       ", *NN_scenes       }
  !__SafeFree{"Regions      ", *NN_regions      }
  !__SafeFree{"Text Regions ", *NN_text_regions }
  !__SafeFree{"Dialogues    ", *DG_dialogues    }
  !__SafeFree{"Pages        ", *DG_pages        }
  !__SafeFree{"Choices      ", *DG_choices      }
  !__SafeFree{"Script Data  ", *NS_script_data  }
  !__SafeFree{"String Table ", *NN_string_table }
  !__SafeFree{"String Data  ", *NN_string_data  }
  !__SafeFree{"Word Table   ", *NN_word_table   }
  !__SafeFree{"Word Data    ", *NN_word_data    }
  !__SafeFree{"Shapes       ", *NN_shapes       }
  !__SafeFree{"Palettes     ", *NN_palettes     }
  !__SafeFree{"UI Palette   ", *NN_ui_palette   }

End Statement

; Loads the mouse pointers
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Statement NN_load_pointers{filename$}
  !DB_trace{"NN_GAME", "NN_load_pointers"}
  LoadShapes #NN_pointer_start, #NN_pointer_end, filename$

  SpriteMode 0
  For i = #NN_pointer_start To #NN_pointer_end
    GetaSprite i - #NN_pointer_start, i
    Free Shape i
  Next
End Statement

QAMIGA

; Load (most of) the game resources
; neonpack$: Game's .NEON file, relative to the data/ directory
; =============================================================================
Function .b NN_load_resources{neonpack$}
  !DB_trace{"MAIN", "NN_load_resources"}
  SHARED NN_error_codes$()
  DEFTYPE .w result
  result = #NN_NEON_success

  result = NN_load_neonpack{neonpack$}
  !DB_log_str{"MAIN", "Loading " + neonpack$}
  If result <> #NN_NEON_success
    !DB_error{"MAIN", "Could not load" + neonpack$}
    !DB_error{"MAIN", NN_error_codes$(result)}
    Function Return result
  End If

  ; Many of the things that follow will likely be coming from the NEONpak in the
  ; future, but for right now they are hard coded in
  !DB_log_str{"MAIN", "Loading all menu shapes"}
  LoadShapes #SH_menu, #SH_menu, "data/menu.shapes"
  LoadShapes #TX_frame_start, #TX_frame_end, "data/frame.shape"
  NN_load_pointers{"data/pointers.shape"}

  ; Load the title screen in the main bitmap
  !DB_log_str{"MAIN", "Loading title screen"}
  LoadBitMap #BMP_main, "data/title.iff", #PAL_main

  !DB_log_str{"MAIN", "Loading flag shapes"}
  LoadShapes #SH_first_flag, #SH_first_flag + (#TX_lang_count * 2), "data/flags.shapes"

  ; Wait 2 second for disk activity to quiet down
  !__wait_for_file_io
  Function Return result
End Function

; Displays the the game's main menu
; Returns an action id that signals the user's action
; =============================================================================
Function .b NN_main_menu{}
  SHARED NN_current_bmp, NN_version$
  !__use_string_table{}

  #menu_padding = 8
  #menu_left = 16
  #menu_top = 136
  #menu_items = 4

  DEFTYPE .w y_start
  y_start = #menu_top

  Dim labels$(#menu_items)
  Dim items.NN_screen_rect(#menu_items)
  For l = 0 To #menu_items - 1
    labels$(l) = !__get_string{#TX_menu_start + l}

    items(l)\x0 = #menu_left
    items(l)\y0 = y_start

    items(l)\x1 = #menu_left + (Len(labels$(l)) * #TX_font_width)
    items(l)\y1 = y_start + #TX_font_height

    y_start + (#TX_font_height + #menu_padding)
  Next


  DEFTYPE .w version_x, version_y
  version_x = #NN_screen_width - ((Len(NN_version$) + 1) *  #TX_font_width)
  version_y = 3

  DEFTYPE .b done, clicked, lmb
  done = 0
  DEFTYPE .w selected, pointer_id
  selected = -1
  pointer_id = #NN_pointer_interact

  BLITZ
  NN_current_bmp = #BMP_main

  Repeat
    VWait

    DisplayPalette #CP_coplist, #PAL_main

    ; Double buffering magic
    DisplayBitMap #CP_coplist, NN_current_bmp
    NN_current_bmp = 1 - NN_current_bmp
    Use BitMap NN_current_bmp
    UnBuffer NN_current_bmp

    ; Get which menu items is being hovered on
    lmb = IN_update_mouse{}
    selected = IN_check_mouse{&items(0), #menu_items}

    TX_draw_text{NN_version$, version_x, version_y}

    pointer_id = #NN_pointer_default
    For l = 0 to #menu_items - 1
      If selected = l
        TX_draw_text{"*" + labels$(l), items(l)\x0 - #TX_font_width, items(l)\y0}
        pointer_id =  #NN_pointer_interact

        ; Was it clicked?
        If lmb = #IN_mouse_released
          clicked = l
          done = True
        End If
      Else
        TX_draw_text{labels$(l), items(l)\x0, items(l)\y0}
      End If
    Next

    ; Update the mouse pointer
    DisplaySprite #CP_coplist, pointer_id, MouseX, MouseY, 0
  Until done = True

  ; Set bitmap back to default
  UnBuffer #BMP_main
  UnBuffer #BMP_alt
  NN_current_bmp = #BMP_main
  Use BitMap NN_current_bmp

  FadeOutScreen{#CP_coplist, #PAL_fx, #PAL_main}

  QAMIGA
  Function Return clicked
End Function

; Shows the language selection screen
; =============================================================================
Statement NN_lang_select{}
  !DB_trace{"MAIN", "NN_lang_select"}
  SHARED NN_current_lang.s
  SHARED TX_langs.s()

  #flag_padding = 8

  ; Define the flag regions
  DEFTYPE .w x_start, w, h
  w = ShapeWidth(#SH_first_flag)
  h = ShapeHeight(#SH_first_flag)

  #x_left = 16
  #x_right = 156
  #flag_area = #x_right - #x_left
  x_start = (#flag_area - (#TX_lang_count * w) - (#flag_padding * (#TX_lang_count - 1))) / 2
  x_start + #x_left

  Dim flags.NN_screen_rect(#TX_lang_count)
  For f = 0 To #TX_lang_count - 1
    flags(f)\x0 = x_start
    flags(f)\y0 = 145
    flags(f)\x1 = x_start + w
    flags(f)\y1 = 145 + h

    x_start + (w + #flag_padding)
  Next

  ; Display the screen and wait for the user
  DEFTYPE .b done, flag_id, lmb, bmp_id
  done = False
  bmp_id = #BMP_main

  DEFTYPE .w selected
  selected = -1

  BLITZ
  Mouse On
  CopyBitMap #BMP_main, #BMP_alt

  ; Fade in the title screen
  FadeInScreen{#CP_coplist, #PAL_main, #PAL_fx}

  DisplayPalette #CP_coplist, #PAL_main
  Repeat
    VWait

    ; Double buffering magic
    DisplayBitMap #CP_coplist, bmp_id
    bmp_id = 1 - bmp_id
    Use BitMap bmp_id
    UnBuffer bmp_id

    ; Update the mouse pointer
    DisplaySprite #CP_coplist, #NN_pointer_default, MouseX, MouseY, 0

    lmb = IN_update_mouse{}
    selected = IN_check_mouse{&flags(0), #TX_lang_count}

    For f = 0 to #TX_lang_count - 1
      If selected = f
        flag_id = f * 2 + #SH_first_flag

        ; Was it clicked?
        If lmb = #IN_mouse_released
          NN_current_lang.s = TX_langs.s(f)
          done = True
        End If
      Else
        flag_id = f * 2 + 1 + #SH_first_flag
      End If

      BBlit bmp_id, flag_id, flags(f)\x0, flags(f)\y0, 0
    Next
  Until done = True
  UnBuffer #BMP_main
  UnBuffer #BMP_alt
  DisplayBitMap #CP_coplist, #BMP_main
End Statement

; Sets the currently selected scene
; =============================================================================
Statement NN_game_set_scene{id.w}
  !DB_trace{"NN_GAME", "NN_game_set_scene: " + Str$(id)}
  SHARED *NN_scenes, *NN_current_scene, NN_current_bmp, *NN_current_location
  SHARED NN_current_palette, NS_script_queue
  SHARED NN_current_scene_id, NN_current_global_scene_id

  NN_current_scene_id = id
  NN_current_global_scene_id = *NN_current_location\first_scene + id

  NN_current_palette = -1

  ; If *NN_current_scene\on_exit <> -1
  ;   NS_execute_script{*NN_current_scene\on_exit}
  ; End If

  ;FadeOutScreen{ #CP_coplist, NN_current_bmp, 10}
  *NN_current_scene = !__get_scene{NN_current_global_scene_id}

  If *NN_current_scene\on_enter > -1
    NS_script_queue = *NN_current_scene\on_enter
  End If

  If *NN_current_scene\music_id > -1
    MS_load_module{*NN_current_scene\music_id, 0}
  End If

  NN_current_bmp = *NN_current_scene\background_id

  ;FadeInScreen{ #CP_coplist, NN_current_bmp, 10}
End Statement

; Loads the bitmaps for the new location and set the current
; scene to the selected one.
;
; Requires AMIGA or QAMIGA mode
; =============================================================================
Statement NN_load_location{new_loc_id.w, new_scene_id.w}
  !DB_trace{"NN_GAME", "NN_load_location{" + Str$(new_loc_id) + ", " + Str$(new_scene_id) + "}"}
  SHARED NN_current_location_id, NN_fade_out, NN_current_bmp
  SHARED *NN_current_location, *NN_current_scene
  SHARED *NN_locations, *NN_scenes
  !__use_string_table{}
  !__use_shapes{}

  NN_current_location_id = new_loc_id

  BLITZ
  FadeOutScreen{#CP_coplist, NN_current_bmp, #PAL_fx}

  DisplaySprite #CP_coplist, #NN_pointer_wait, #NN_screen_width LSR 1, #NN_screen_height LSR 1, 0
  NN_set_ui_colors{#PAL_fx}
  DisplayPalette #CP_coplist, #PAL_fx
  QAMIGA

  ; Before we change location, do some cleanup and clear out portraits
  If *NN_current_location <> 0
    For p = 0 to 7
      If *NN_current_location\speakers[p] <> -1
        Free Shape #SH_first_portrait + *NN_current_location\speakers[p]
      End If
    Next
  End If

  *NN_current_location = !__get_location{new_loc_id}

  ; Load the shapes if there are any
  If *NN_current_location\shapes_file <> -1
    DEFTYPE .NN_shape *first_shape, *last_shape
    *first_shape = !__get_shape{*NN_current_location\first_shape}
    *last_shape = !__get_shape{*NN_current_location\last_shape}
    LoadShapes *first_shape\shape_id, *last_shape\shape_id, "data/" + !__get_string{*NN_current_location\shapes_file}
  End If

  ; Load the portraits if there are any
  DEFTYPE .MPSH_context context
  DEFTYPE .w blitz_id, shape_id
  MPSH_begin{&context, "data/people.mpsh"}
  For p = 0 to 7
    shape_id = *NN_current_location\speakers[p]
    blitz_id = #SH_first_portrait + shape_id
    If shape_id <> -1
      MPSH_get_shape{&context, blitz_id, shape_id, 1}
    End If
  Next
  MPSH_end{&context}

  ; Load all the backgrounds
  DEFTYPE .w bg_count
  bg_count = *NN_current_location\last_bg - *NN_current_location\first_bg
  For bg = 0 To bg_count
    BitMap bg, #NN_screen_width, #NN_screen_height, #NN_screen_bpp
    bmp$ = !__get_string{bg + *NN_current_location\first_bg}
    ;NPrint bmp$
    LoadBitMap bg, "data/" + bmp$, bg
  Next

  ; Setup the next scene
  NN_game_set_scene{new_scene_id}

  BLITZ
  DEFTYPE .NN_scene *scene
  For scnid = *NN_current_location\first_scene to *NN_current_location\last_scene
    *scene = !__get_scene{scnid}
    If NOT *scene\is_cutscene
      Use BitMap *scene\background_id
      Blit #SH_menu, 320 - ShapeWidth(#SH_menu) - 4, 200 - ShapeHeight(#SH_menu) - 4, 0
    Next
  End If

  ; Use BitMap new_scene_id
  ; FadeInScreen{#CP_coplist, #PAL_main, #PAL_fx}

  QAMIGA

  ;*NN_current_scene = !__get_scene{*NN_current_location\first_scene + new_scene_id}
  ; If *NN_current_scene\on_enter <> -1
  ;   NS_execute_script{*NN_current_scene\on_enter}
  ; End If

  PrintFreeMem{}
End Statement

; Checks if a point is inside one of the regions
; =============================================================================
Function.w NN_get_overlapped_region{mx.w, my.w}
  ;!DB_trace{"NN_GAME", "NN_get_overlapped_region"}
  SHARED *NN_regions, *NN_current_scene
  DEFTYPE .NN_region *region

  For r = *NN_current_scene\first_region To *NN_current_scene\last_region
    *region = !__get_region{r}
    x1.w = *region\x1
    x2.w = *region\x2
    y1.w = *region\y1
    y2.w = *region\y2

    If mx >= x1 AND mx < x2 AND my >= y1 AND my < y2
      Function Return r
    End If
  Next

  Function Return -1
End Function

Statement NN_game_map{}
  !DB_trace{"NN_GAME", "NN_game_map"}
  NPrint "Displaying location map"
End Statement

Statement NN_game_over{id.w}
  !DB_trace{"NN_GAME", "NN_game_over"}
End Statement

Statement NN_quit_game{}
  SHARED NN_should_quit
  NN_should_quit = True
End Statement

; Saves the game
; =============================================================================
Statement NN_save_game{}
  !DB_trace{"NN_GAME", "NN_save_game"}
  SHARED NN_current_location_id, NN_current_scene_id
  SHARED NS_flags(), NS_page_flags(), NS_choice_flags(), NS_scene_flags()
  !__use_dialogues{}
  !__use_dialogue_limits{}

  DEFTYPE .w id
  id = 0
  If OpenFile(id, "save.neon") = 0
    !DB_trace{"NN_GAME", "Could not save game."}
    Statement Return
  End If

  ; Write the player's current location
  WriteMem id, &NN_current_location_id, SizeOf .w
  WriteMem id, &NN_current_scene_id, SizeOf .w

  ; Write all the flags!
  For i = 0 To #NS_flag_count
    WriteMem id, &NS_flags(i), (SizeOf .b)
  Next

  For i = 0 To #NS_flag_count
    WriteMem id, &NS_page_flags(i), (SizeOf .b)
  Next

  For i = 0 To #NS_flag_count
    WriteMem id, &NS_choice_flags(i), (SizeOf .b)
  Next

  For i = 0 To #NS_flag_count
    WriteMem id, &NS_scene_flags(i), (SizeOf .b)
  Next

  CloseFile id

  !__wait_for_file_io
End Statement

; Loads the game
; =============================================================================
Statement NN_load_game{}
  !DB_trace{"NN_GAME", "NN_load_game"}
  SHARED NN_current_location_id, NN_current_scene_id
  SHARED NS_flags(), NS_page_flags(), NS_choice_flags(), NS_scene_flags()
  !__use_dialogues{}
  !__use_dialogue_limits{}

  DEFTYPE .w id
  id = 0
  If OpenFile(id, "save.neon") = 0 Then Statement Return

  ; Read the player's current location
  ReadMem id, &NN_current_location_id, SizeOf .w
  ReadMem id, &NN_current_scene_id, SizeOf .w

  ; Read all the flags!
  DEFTYPE .b flag
  For i = 0 To #NS_flag_count
    ReadMem id, &flag, (SizeOf .b)
    NS_flags(i) = flag
  Next

  For i = 0 To #NS_flag_count
    ReadMem id, &flag, (SizeOf .b)
    NS_page_flags(i) = flag
  Next

  For i = 0 To #NS_flag_count
    ReadMem id, &flag, (SizeOf .b)
    NS_choice_flags(i) = flag
  Next

  For i = 0 To #NS_flag_count
    ReadMem id, &flag, (SizeOf .b)
    NS_scene_flags(i) = flag
  Next

  CloseFile id

  ; Move to the current location
  NN_load_location{NN_current_location_id, NN_current_scene_id}
End Statement

; Start the game
; =============================================================================
Function .b NN_startup{neonpack$}
  !DB_trace{"MAIN", "NN_startup: " + neonpack$}
  SHARED NN_error_codes$(), NS_page_flags(), NS_choice_flags()
  SHARED NN_current_lang.s, NN_is_NTSC
   !__use_string_table{}
  DEFTYPE .w result
  QAMIGA

  ; Create the two game bitmaps. The main one will be used almost exclusively
  ; and the alt one will be used for special scenarios
  BitMap #BMP_main, #NN_screen_width, #NN_screen_height, #NN_screen_bpp
  BitMap #BMP_alt, #NN_screen_width, #NN_screen_height, #NN_screen_bpp

  ; Load the MPG logo in the alt image an display it
  LoadBitMap #BMP_alt, "data/mpg.iff", #PAL_alt

  ; Create a new display, and stretch it to NTSC if necessary
  BLITZ
  CreateDisplay #CP_coplist
  If NN_is_NTSC Then Poke $DFF1DC, $000

  DisplayBitMap #CP_coplist, #BMP_alt
  FadeInScreen{#CP_coplist, #PAL_alt, #PAL_fx}

  ; Now that we got the splash screen buying us time, load the rest
  QAMIGA
  result = NN_load_resources{neonpack$}
  BLITZ
  FadeOutScreen{#CP_coplist, #PAL_fx, #PAL_alt}

  ;Fade in the title screen and show the language selection flags
  NN_lang_select{}

  DEFTYPE .s lang_pack
  lang_pack = "data/lang/" + NN_current_lang.s + ".noir"

  QAMIGA
  success = NN_load_langpack{lang_pack}
  If success <> #NN_NEON_success
    !DB_error{"MAIN", "Could not load " + lang_pack}
    !DB_error{"MAIN", NN_error_codes$(success)}
    Function Return success
  End If

  ; Load the font file
  !DB_log_str{"MAIN", "Loading language: " + !__get_string{#TX_lang_id}}
  fontfile$ = !__get_string{#TX_font_path}
  !DB_log_str{"MAIN", "Loading font file:" + fontfile$}
  LoadShapes #TX_font_start, #TX_font_end, fontfile$

  For f = 0 to #NS_flag_count
    NS_page_flags(f) = True
    NS_choice_flags(f) = True
  Next

  ; Display the main menu
  Select NN_main_menu{}
    Case #NN_menu_start
      NN_load_location{0, 0}

    Case #NN_menu_continue
      NN_load_game{}

    Case #NN_menu_credits
      NN_load_location{1, 0}

    Case #NN_menu_exit
      NN_quit_game{}
      success = #NN_NEON_quit

  End Select

  Function Return success
End Function

