; =============================================================================
; NS_Script
; -----------------------------------------------------------------------------
; Executes the NOIRscript bytecode
; =============================================================================

Macro __print_bc
  op$ = (`2)
  !DB_printf{"********     %04lx: %02x - %s", (`1), (`1), &op$}
End Macro

Macro __print_bc_v1
  op$ = (`2)
  !DB_printf{"********     %04lx: %02x - %s %d", (`1), (`1), &op$, (`3)}
End Macro

Macro __print_bc_v2
  op$ = (`2)
  !DB_printf{"********     %04lx: %02x - %s %d %d", (`1), (`1), &op$, (`3), (`4)}
End Macro

Macro __print_bc_v3
  op$ = (`2)
  !DB_printf{"********     %04lx: %02x - %s %d %d", (`1), (`1), &op$, (`3), (`4), (`5)}
End Macro

Macro __execute_opcode
  PC + 2
  !__print_bc{PC, (`1)}
End Macro

Macro __execute_opcode_v1
  PC + 2
  v1 = Peek.w(*NS_script_data + PC)
  !__print_bc{PC - 2, (`1), v1}
  PC + 2
End Macro

Macro __execute_opcode_v2
  PC + 2
  v1 = Peek.w(*NS_script_data + PC)
  PC + 2
  v2 = Peek.w(*NS_script_data + PC)
  !__print_bc_v2{PC - 4, (`1), v1, v2}
  PC + 2
End Macro

Macro __execute_opcode_v3
  PC + 2
  v1 = Peek.w(*NS_script_data + PC)
  PC + 2
  v2 = Peek.w(*NS_script_data + PC)
  PC + 2
  v3 = Peek.w(*NS_script_data + PC)
  !__print_bc_v2{PC - 4, (`1), v1, v2, v3}
  PC + 2
End Macro

DEFTYPE .TX_context ns_text_context

; Executes the bytecode pointed to in the script
; Assumes the existence of this global data:
;   NS_data: Word array containing the opcodes to all the scrips
;   NS_flags: Byte array containing all of the game's flags
; And these global statements/functions
;   NN_game_over: Transition to game over screen
;   NN_display_text: Show text on the screen
;   IV_has_item: Check if an item is in the inventory
;   IV_add_item: Adds an item to the inventory
;   IV_remove_item: Removes and item from the inventory
;   SH_draw: Draws a shape
;   SC_set_bg: Sets the background in a scene
;   NN_game_set_scene: Goes to a new scene
;   NN_game_map: Display the map with locations
Statement NS_execute_script{script_offset.l}
  !DB_trace{"NS_SCRIPT", "NS_exectute_script: $" + Hex$(script_offset)}
  SHARED *NS_script_data, NS_script_data_size, NS_flags()    ; get a reference to the script data and game flags
  SHARED *NN_string_table, ns_text_context
  ; Get the referenced script
  If script_offset > NS_script_data_size
    !DB_printf {"ERROR: Script offset $%X out of bounds. Size $%X", script_offset, NS_script_data_size};
    Statement Return
  End If

  DEFTYPE .l PC
  DEFTYPE .b FR, done, result

  PC = script_offset * SizeOf .w; Set up program counter
  FR = False                    ; Initialize Flag Register
  done = False

  DEFTYPE .w v1, v2, v3
  Repeat
    Select Peek.w (*NS_script_data + PC)
      Case #NS_op_noop
        !__execute_opcode{"noop"}

      ; Flag register operations
      Case #NS_op_clear
        !__execute_opcode{"clear"}
        FR = False

      Case #NS_op_set
        !__execute_opcode{"ser"}
        FR = True

      Case #NS_op_load; id
        !__execute_opcode_v1{"load"}
        FR = NS_flags(v1)

      Case #NS_op_store; id
        !__execute_opcode_v1{"store"}
        NS_flags(v1) = FR

      ; Logical operations
      Case #NS_op_and; id
        !__execute_opcode_v1{"and"}
        FR AND NS_flags(v1)

      Case #NS_op_or; id
      !__execute_opcode_v1{"or"}
        FR OR NS_flags(v1)

      Case #NS_op_not
        !__execute_opcode{"not"}
        FR = NOT FR

      ; Flow control
      Case #NS_op_jump; offset
        !__execute_opcode_v1{"jump"}
        PC + (v1 ASL 1)

      Case #NS_op_jift; offset
        PC + 2              ; Eat the opcode
        v1 = Peek.w (*NS_script_data + PC) - 1
        if FR
            PC + (v1 ASL 1)
        Else
            PC + 2              ; Eat the parameter
        End If
        !__print_bc_v1{PC, "jift", v1}

      Case #NS_op_jiff; offset
        PC + 2              ; Eat the opcode
        v1 = Peek.w (*NS_script_data + PC) - 1
        if FR
            PC + 2              ; Eat the parameter
        Else
            PC + (v1 ASL 1)
        End If
        !__print_bc_v1{PC, "jiff", v1}

      Case #NS_op_end
        !__execute_opcode_v1{"end"}
        done = True

      ; Scene operations
      Case #NS_op_setbg; id
        !__execute_opcode_v1{"setbg"}
        SC_set_bg{v1}

      ; Shape operations
      Case #NS_op_draw; id x y
        !__execute_opcode_v3{"draw"}
        SH_draw{v1, v2, v3}

      ; Game operations
      Case #NS_op_goto; id
        !__execute_opcode_v1{"goto"}
        NN_game_set_scene{v1}
        done = True

      Case #NS_op_map
        !__execute_opcode{"map"}
        NN_game_map{}
        done = True

      Case #NS_op_text; id
        !__execute_opcode_v1{"text"}
        TX_draw_text_wrapped{!__get_string{v1}, 32, #NN_half_screen_width , #NN_screen_height, True}

      Case #NS_op_goloc; loc scene
        !__execute_opcode_v2{"goloc"}
        QAMIGA
        NN_load_location{v1, v2}
        BLITZ

      Case #NS_op_mousewait
        !__execute_opcode{"mousewait"}
        Repeat
          VWait
          left_mouse = IN_update_mouse{}
        Until left_mouse = #IN_mouse_released

      Case #NS_op_loadgame
        !__execute_opcode{"loadgame"}
        QAMIGA
        result = NN_load_game{}
        BLITZ

      Case #NS_op_savegame
        !__execute_opcode{"savegame"}
        QAMIGA
        NN_save_game{}
        BLITZ

      Case #NS_op_quit
        !__execute_opcode{"quit"}
        NN_quit_game{}

      Case #NS_op_gameover
        PC + 2              ; Eat the opcode
        v1 = Peek.w (*NS_script_data + PC)
        !__print_bc_v1{PC, "gameover", v1}
        NN_game_over{v1}
        done = True

      ; Music operations
      Case #NS_op_mod; id pos
        !__execute_opcode_v2{"mod"}
        MS_load_module{v1, v2}

      Case #NS_op_modpause; id
        !__execute_opcode_v1{"modpause"}
        MS_pause_module{v1}

      Case #NS_op_modplay; id
        !__execute_opcode_v1{"modplay"}
        MS_unpause_module{v1}

      Case #NS_op_modkill; id
        !__execute_opcode_v1{"modkill"}
        MS_kill_module{v1}

      ; Dialogue operations
      Case #NS_op_dlg
        !__execute_opcode_v1{"dlg"}
        DG_show_dialog{v1}

      Case #NS_op_choff
        !__execute_opcode_v1{"choff"}
        DG_enable_choice{v1, False}

      Case #NS_op_chon
        !__execute_opcode_v1{"chon"}
        DG_enable_choice{v1, True}

      Case #NS_op_pageoff
        !__execute_opcode_v1{"pageoff"}
        DG_enable_page{v1, False}

      Case #NS_op_pageon
        !__execute_opcode_v1{"pageon"}
        DG_enable_page{v1, True}

      Case #NS_op_dlgimg
        !__execute_opcode_v1{"dlgimg"}
        DG_set_speaker_image{v1}

      Case #NS_op_dlgname
        !__execute_opcode_v1{"dlgname"}
        DG_set_speaker_name{v1}

      Case #NS_op_dlgend
        !__execute_opcode{"dlgend"}
        DG_end{}

      Case #NS_op_txtstart
        !__execute_opcode_v1{"txtstart"}
        TX_begin{&ns_text_context, v1, False}

      Case #NS_op_txtend
        !__execute_opcode_v3{"txtend"}
        TX_end{&ns_text_context, v1, v2, v3}

      Case #NS_op_txtput
        !__execute_opcode_v2{"txtput"}
        size = TX_put_text{&ns_text_context, v1, v2}

      Case #NS_op_txtnl
        !__execute_opcode{"txtnl"}
        ns_text_context\y_position + 1

      Default
        ; Unknown opcode!
        v1 = Peek.w (*NS_script_data + PC)
        !DB_log_str{"NS_SCRIPT", "Error! Unknown opcode! PC: $" + Hex$(PC) + " Opcode: $" + Hex$(v1)}
        done = True

    End Select
  Until done = True
End Statement

Statement NS_process_queue{}
  SHARED NS_script_queue
  ;!DB_trace("NS_SCRIPT", "NS_process_queue: " + Str$(NS_script_queue))

  DEFTYPE .w script
  script = NS_script_queue
  NS_script_queue = - 1

  If script <> -1
    NS_execute_script{script}
  End If
End Statement

